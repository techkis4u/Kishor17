package com.cpd.validator;

import org.springframework.stereotype.Component;
import org.springframework.validation.Errors;
import org.springframework.validation.Validator;

import com.cpd.command.ShipmentBookingCommand;

@Component
public class ShipmentBookingValidator implements Validator {

	@Override
	public boolean supports(Class<?> clazz) {
		if (clazz.isAssignableFrom(ShipmentBookingCommand.class))
			return true;
		return false;
	}

	@Override
	public void validate(Object target, Errors errors) {
		ShipmentBookingCommand bookingCommand = (ShipmentBookingCommand) target;

		if (bookingCommand.getName() == null || "".equals(bookingCommand.getName())
				|| bookingCommand.getName().isEmpty()) {

			errors.rejectValue("name", "shiping.name");
		}
		if (bookingCommand.getPhone() == null || "".equals(bookingCommand.getPhone())
				|| bookingCommand.getPhone().isEmpty()) {

			errors.rejectValue("phone", "shiping.phone");
		}
		if (!bookingCommand.getEmail() .contains("@")&& !bookingCommand.getEmail().contains(".com")) {
			errors.rejectValue("email", "shiping.email");
		}
		if (bookingCommand.getFromAddressLine1() == null || "".equals(bookingCommand.getFromAddressLine1())
				|| bookingCommand.getFromAddressLine1().isEmpty()) {

			errors.rejectValue("formaddressLine1", "shiping.formaddressLine1");
		}
		if (bookingCommand.getFromAddressLine2() == null || "".equals(bookingCommand.getFromAddressLine2())
				|| bookingCommand.getFromAddressLine2().isEmpty()) {

			errors.rejectValue("formaddressLine2", "shiping.formaddressLine2");
		}
		
		
		
	}

}
